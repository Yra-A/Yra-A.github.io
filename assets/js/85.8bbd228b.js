(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{463:function(s,t,a){"use strict";a.r(t);var e=a(8),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"【oop】访问控制与继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#【oop】访问控制与继承"}},[s._v("#")]),s._v(" 【OOP】访问控制与继承")]),s._v(" "),t("h2",{attrs:{id:"访问说明符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问说明符"}},[s._v("#")]),s._v(" 访问说明符")]),s._v(" "),t("p",[s._v("每个类控制着其成员的访问权限，其通过访问说明符来实现。")]),s._v(" "),t("p",[s._v("在 C++ 中，有三种访问说明符 "),t("code",[s._v("public")]),s._v("、"),t("code",[s._v("private")]),s._v("、"),t("code",[s._v("protected")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("public")]),s._v("：在一个类中对于用 "),t("code",[s._v("public")]),s._v(" 修饰的成员，该类的成员、用户（类的实例对象）、派生类及友元等都可访问。")]),s._v(" "),t("p",[t("code",[s._v("private")]),s._v("：在一个类中对于用 "),t("code",[s._v("private")]),s._v(" 修饰的成员，仅该类的成员或友元可以访问，")]),s._v(" "),t("p",[t("code",[s._v("protected")]),s._v("：在一个类中对于用 "),t("code",[s._v("protected")]),s._v(" 修饰的成员，该类的成员、派生类及友元都可以访问")]),s._v(" "),t("p",[s._v("简单来说，也就是 public 成员对谁都可以访问，而 private 成员只有类内部的成员和友元可以访问，而 protected 在 private 的基础上给派生类提供了访问权限。")]),s._v(" "),t("h2",{attrs:{id:"protected"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#protected"}},[s._v("#")]),s._v(" protected")]),s._v(" "),t("p",[t("code",[s._v("protected")]),s._v(" 类似于 "),t("code",[s._v("public")]),s._v(" 和 "),t("code",[s._v("private")]),s._v(" 的公有产物，被其修饰的成员有以下特点：")]),s._v(" "),t("ul",[t("li",[s._v("对类的用户不可见")]),s._v(" "),t("li",[s._v("可以被派生类以及友元访问")])]),s._v(" "),t("p",[s._v("但需要注意的是，派生类及其友元只能通过派生类对象来访问这些继承而来的受保护的成员，而不能通过基类对象来访问。")]),s._v(" "),t("h2",{attrs:{id:"派生列表的访问说明符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#派生列表的访问说明符"}},[s._v("#")]),s._v(" 派生列表的访问说明符")]),s._v(" "),t("p",[s._v("派生类对其继承而来的成员访问权限会受两者影响：")]),s._v(" "),t("ol",[t("li",[s._v("基类中的访问说明符")]),s._v(" "),t("li",[s._v("派生列表的访问说明符。")])]),s._v(" "),t("p",[s._v("如果访问直接基类的成员时，派生列表的访问说明符并不会产生影响，此时只受到基类中的访问说明符限制。")]),s._v(" "),t("p",[s._v("但对于继承自该派生类的新类来说则不同。")]),s._v(" "),t("p",[s._v("通俗点来说，我们先令按权限大小对访问说明符排序，"),t("code",[s._v("public")]),s._v(" > "),t("code",[s._v("protected")]),s._v(" > "),t("code",[s._v("private")]),s._v("，对于 xx 继承（公共继承、受保护继承、私有继承三者之一），我们将继承而来的成员中，由权限大于 xx 的访问说明符修饰的成员变成 xx 访问说明符修饰的成员。")]),s._v(" "),t("p",[t("strong",[s._v("例：")])]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Der")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ......")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("在类 Der 中，其继承自基类 Base 中的公有成员 x，会变成 Der 的受保护成员。")]),s._v(" "),t("h4",{attrs:{id:"默认的继承保护级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认的继承保护级别"}},[s._v("#")]),s._v(" 默认的继承保护级别")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("class")]),s._v(" 和 "),t("code",[s._v("struct")]),s._v(" 定义的类，除了其默认访问说明符有区别外，对于默认的继承保护级别也是有区别的。")]),s._v(" "),t("p",[s._v("当我们没有显示的在派生列表中说明访问说明符时，"),t("code",[s._v("class")]),s._v(" 默认为私有继承，而 "),t("code",[s._v("struct")]),s._v(" 默认为公有继承。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("D1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认为公有继承")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("D2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认为私有继承")]),s._v("\n")])])]),t("p",[s._v("PS：定义派生类时最好显示地表明其继承关系。")]),s._v(" "),t("h2",{attrs:{id:"改变个别成员的可访问性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改变个别成员的可访问性"}},[s._v("#")]),s._v(" 改变个别成员的可访问性")]),s._v(" "),t("p",[s._v("我们可以通过 "),t("code",[s._v("using")]),s._v(" 声明语句来改变个别成员(该成员本身需要可以访问)的可访问性。")]),s._v(" "),t("p",[s._v("例如派生类私有继承了某个基类，那么其继承而来的成员会变成该派生类的私有成员，但如果我们对某个继承而来的成员使用 "),t("code",[s._v("using")]),s._v(" 声明语句，则该成员的可访问性取决于 "),t("code",[s._v("using")]),s._v(" 声明语句之前的访问说明符。")]),s._v(" "),t("p",[t("strong",[s._v("例：")])]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Der")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" Base"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 改变可访问性为 public")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("hr"),s._v(" "),t("p",[s._v("参考书籍：《C++ Primer》")])])}),[],!1,null,null,null);t.default=n.exports}}]);