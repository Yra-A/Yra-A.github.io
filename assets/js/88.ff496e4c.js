(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{466:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[t._v("#")]),t._v(" Channel")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Go 语言中，不通过共享内存实现通信，而通过通信来实现共享内存")])]),t._v(" "),s("li",[s("p",[t._v("Go 语言的 CSP（通信顺序进程）并发模型，是通过 goroutine 和 channel 实现的")])]),t._v(" "),s("li",[s("p",[t._v("channel 遵守 FIFO 原则，分为有缓冲区和无缓冲区")])]),t._v(" "),s("li",[s("p",[t._v("假设 ch 是函数栈上的一个指针，其指向堆中的 hchan 数据结构")]),t._v(" "),s("ul",[s("li",[t._v("hchan 支持多个协程的并发访问，所以包含一把互斥锁")]),t._v(" "),s("li",[t._v("包含缓冲区指针（缓冲区是一个数组）")]),t._v(" "),s("li",[t._v("包含已经存储了多少数据")]),t._v(" "),s("li",[t._v("包含最多能存储多少数据")]),t._v(" "),s("li",[t._v("包含每个元素占多大空间")]),t._v(" "),s("li",[t._v("因为内存复制、gc 等机制依赖于数据类型，所以包含一个指针指向元素类型的类型元数据")]),t._v(" "),s("li",[t._v("包含发送、接受队列和发送、接收下标")]),t._v(" "),s("li",[t._v("包含关闭状态")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" hchan "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    qcount   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已经存储的元素数量")]),t._v("\n    dataqsiz "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最多存储的元素数量")]),t._v("\n    buf      unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓冲区（循环数组）指针")]),t._v("\n    elemsize "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint16")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个元素的大小")]),t._v("\n\n    closed   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("  \t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭标志")]),t._v("\n    elemtype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素类型的类型元数据指针")]),t._v("\n\n    sendx    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一次发送数据的下标")]),t._v("\n    recvx    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一次读取数据的下标")]),t._v("\n\n    recvq    waitq  \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受队列")]),t._v("\n    sendq    waitq  \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送队列")]),t._v("\n\n    lock mutex \t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 互斥锁，支持多协程访问")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("缓冲区是一个环形缓冲区 Ring Buffer")])]),t._v(" "),s("li",[s("p",[t._v("发送数据时，")]),t._v(" "),s("ul",[s("li",[t._v("不发生阻塞的情况：缓冲区非空且有空闲区域、缓冲区为空且有协程等待接收数据")]),t._v(" "),s("li",[t._v("会发生阻塞的情况：channel 为 nil、缓冲区为空且没有协程等待接收数据、缓冲区满了且没有协程等待接收数据")]),t._v(" "),s("li",[t._v("可以使用 select + default 的非阻塞式写法")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("接收数据时，")]),t._v(" "),s("ul",[s("li",[t._v("不发生阻塞的情况：缓冲区非空有数据、缓冲区为空且有协程等待发送数据")]),t._v(" "),s("li",[t._v("会发生阻塞的情况：channel 为 nil、缓冲区为空且没有协程等待发送数据、有缓冲区但没有数据且没有协程等待发送数据")]),t._v(" "),s("li",[t._v("也可以使用 select + default 的非阻塞写法")])])]),t._v(" "),s("li",[s("p",[t._v("多路 select 中，每个 case 可以是一个 channel 的发送 或 接受操作，其中 default 可选")])])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("ch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ch2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" b\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("用 channel 共享内存可以解耦生产者和消费者，但容易引发阻塞甚至死锁")])])])}),[],!1,null,null,null);s.default=e.exports}}]);